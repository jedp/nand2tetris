// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=a-cmd);
    Not(in=a-cmd,           out=c-cmd);

    // Select A instruction or ALU output for A register.
    Mux16(a=alu-out, b=instruction, sel=a-cmd, out=a-reg-input);

    // Dst bit 5: Write A, if C cmd.
    And(a=instruction[5], b=c-cmd, out=writeA);
    Or(a=writeA, b=a-cmd, out=load-a);

    // Dst bit 4: Write D, if C cmd.
    And(a=instruction[4], b=c-cmd, out=writeD);

    // Dst bit 3: Write Mem, if C cmd.
    And(a=instruction[3], b=c-cmd, out=writeM);

    ARegister(in=a-reg-input, load=load-a, out=a-reg, out[0..14]=addressM);
    DRegister(in=alu-out, load=writeD, out=x);

    // Select A or M as y.
    Mux16(a=a-reg, b=inM, sel=instruction[12], out=y);

    ALU(
      x=x,
      y=y,
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      out=alu-out, out=outM,
      zr=eq,              // If out==0 zr=1 else zr=0
      ng=lt               // If out<0  ng=1 else ng=0
    );

    // Comparators.
    Not(in=eq,      out=ne);
    Not(in=lt,      out=ge);
    And(a=ne, b=ge, out=gt);
    Not(in=gt,      out=le);

    // Jump conditions.
    And(a=instruction[0], b=gt, out=jmp-gt);
    And(a=instruction[1], b=eq, out=jmp-eq);
    And(a=instruction[2], b=lt, out=jmp-lt);

    // Do jump if any condition matches.
    // Always jump when instruction[0..2] = 0b111.
    // Never jump when instruction[0..2] = 0b000.
    Or(a=jmp-gt, b=jmp-eq, out=jmp-ge);
    Or(a=jmp-ge, b=jmp-lt, out=jmp);
    And(a=c-cmd, b=jmp, out=load-jmp);

    PC(
      in=a-reg,
      load=load-jmp,
      inc=true,
      reset=reset,
      out[0..14]=pc
    );
}

